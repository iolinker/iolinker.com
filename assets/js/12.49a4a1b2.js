(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{312:function(t,e,a){t.exports=a.p+"assets/img/telegram-message-getupdate.dccc91eb.png"},313:function(t,e,a){t.exports=a.p+"assets/img/telegram-message-webhook.9aa8dc8e.png"},520:function(t,e,a){t.exports=a.p+"assets/img/python-telegram-bot-site-1.3a4e400a.png"},521:function(t,e,a){t.exports=a.p+"assets/img/python-telegram-bot-site-2.0d7ab82d.png"},522:function(t,e,a){t.exports=a.p+"assets/img/telegram-bot-api.e07464f1.png"},523:function(t,e,a){t.exports=a.p+"assets/img/create_telegram_bot_from_botfather.bdfde87a.png"},524:function(t,e,a){t.exports=a.p+"assets/img/create-telegram-credential.367acb9b.png"},525:function(t,e,a){t.exports=a.p+"assets/img/tg-bot-start-cmd.161e35f9.png"},526:function(t,e,a){t.exports=a.p+"assets/img/builtin-cmd-list.7bbf09ea.png"},527:function(t,e,a){t.exports=a.p+"assets/img/create-workflow-menu.570d5738.png"},528:function(t,e,a){t.exports=a.p+"assets/img/set-tg-bot-trigger.6f5b807c.png"},529:function(t,e,a){t.exports=a.p+"assets/img/create_tg_nmap_cmd.83bc3586.png"},530:function(t,e,a){t.exports=a.p+"assets/img/tg_nmap_cmd_trigger.2fe0f866.png"},531:function(t,e,a){t.exports=a.p+"assets/img/tg-bot-execution-list.1ca3874d.png"},532:function(t,e,a){t.exports=a.p+"assets/img/telegram-bot-trigger-detail.d0b26e59.png"},533:function(t,e,a){t.exports=a.p+"assets/img/set-telegram-id.35a757ab.png"},534:function(t,e,a){t.exports=a.p+"assets/img/set-tg-approval-bot-setting.bddc9e4a.png"},535:function(t,e,a){t.exports=a.p+"assets/img/telegram-bot-list.b0a36f5a.png"},536:function(t,e,a){t.exports=a.p+"assets/img/tg-bot-start-cmd-v2.a119a350.png"},537:function(t,e,a){t.exports=a.p+"assets/img/tg-bot-execution-detail-v2.4c92b82f.png"},779:function(t,e,a){"use strict";a.r(e);var r=a(27),s=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_1分钟快速实现一个telegram-bot指令交互机器人"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1分钟快速实现一个telegram-bot指令交互机器人"}},[t._v("#")]),t._v(" 1分钟快速实现一个Telegram Bot指令交互机器人")]),t._v(" "),e("p",[t._v("下面这篇文章会告诉你怎样用一种低代码编排的方式来实现一个复杂的Telegram交互机器人，即时不懂编程的人也可以快速实现一个自己的机器人，而且是可以用指令交互的机器人！！！")]),t._v(" "),e("iframe",{attrs:{width:"800",height:"600",src:"https://www.youtube.com/embed/zoEYr-Z1f1s",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}}),t._v(" "),e("h2",{attrs:{id:"一、效果演示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、效果演示"}},[t._v("#")]),t._v(" 一、效果演示")]),t._v(" "),e("p",[t._v("先说重点，看看我们要做成的Telegram机器人效果是怎样的：")]),t._v(" "),e("h2",{attrs:{id:"二、接收telegram回调消息的两种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、接收telegram回调消息的两种方式"}},[t._v("#")]),t._v(" 二、接收Telegram回调消息的两种方式")]),t._v(" "),e("p",[t._v("对于普通的个人开发者来说，使用getUpdate方式的要求门槛较少，不需要太多前提条件。除非对实时性要求高、且需要处理大量的消息，就可以考虑选择webhook模式。")]),t._v(" "),e("h3",{attrs:{id:"_1-getupdate模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-getupdate模式"}},[t._v("#")]),t._v(" （1）getUpdate模式")]),t._v(" "),e("p",[t._v("主动拉Telegram提供的getUpdate接口来获取发送给机器人的消息以及事件数据，这种方式不需要像WebHook那样提供域名并暴露在公网上，在内网也可以接受Telegram机器人的回调消息。如下是该模式的流程原理。")]),t._v(" "),e("blockquote",[e("p",[t._v("优点")])]),t._v(" "),e("ul",[e("li",[t._v("不需要暴露公网机器，可在内网拉Telegram回调消息，安全性高")]),t._v(" "),e("li",[t._v("不需要域名，不需要HTTPS证书")]),t._v(" "),e("li",[t._v("不需要向Telegram BotFather注册webhook接口，直接调用拉数据")])]),t._v(" "),e("blockquote",[e("p",[t._v("缺点")])]),t._v(" "),e("ul",[e("li",[t._v("需要定时轮询方式拉取消息，实时性稍微差一点")]),t._v(" "),e("li",[t._v("需要自己本地存储处理上次同步过的消息，避免重复响应消息")]),t._v(" "),e("li",[t._v("仅适合消息量较小的业务场景")])]),t._v(" "),e("img",{staticStyle:{zoom:"67%"},attrs:{src:a(312),alt:"getUpdate方式拉消息原理图",title:"通过telegram getUpdate方式拉消息"}}),t._v(" "),e("h3",{attrs:{id:"_2-webhook模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-webhook模式"}},[t._v("#")]),t._v(" （2）webhook模式")]),t._v(" "),e("p",[t._v("提供一个回调地址（需要https的域名）给Telegram，Telegram会把机器人收到的消息和事件数据推送到这个回调接口，这种方式实时性会更高，但是相对低会要求用户把系统暴露到公网上，且需要提供一个带HTTPS证书的域名。如下是该模式的流程原理。")]),t._v(" "),e("blockquote",[e("p",[t._v("优点")])]),t._v(" "),e("ul",[e("li",[t._v("实时性较强，适合处理消息多的业务场景")]),t._v(" "),e("li",[t._v("不需要记录上次同步的消息，实现较简单")])]),t._v(" "),e("blockquote",[e("p",[t._v("缺点")])]),t._v(" "),e("ul",[e("li",[t._v("需要一台暴露在公网的机器，可能存在被攻击风险")]),t._v(" "),e("li",[t._v("需要一个带HTTPS证书的域名")]),t._v(" "),e("li",[t._v("需要手动向Telegram平台的BotFather注册这个回调接口")])]),t._v(" "),e("img",{staticStyle:{zoom:"67%"},attrs:{src:a(313),alt:"webhook方式拉消息原理图",title:"通过telegram webhook方式拉消息"}}),t._v(" "),e("h2",{attrs:{id:"三、python库实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、python库实现"}},[t._v("#")]),t._v(" 三、Python库实现")]),t._v(" "),e("p",[t._v("相信下面这个库，很多用python实现Telegram机器人的开发者应该见过或者使用过。这个开源Python库封装了很多Telegram的官方API，大大降低了调用Telegram接口的难度。但是还是无法避免需要写大量的代码，特别是要想实现有复杂交互能力的Telegram机器人，还涉及到各种编程技术以及涉及到本地数据的存储维护等问题。")]),t._v(" "),e("p",[t._v("这种对于有编程能力的开发者尚且有些困难，更别说那些没学过编程技术的人了！！！")]),t._v(" "),e("p",[t._v("开源Telegram Python库：https://github.com/python-telegram-bot/python-telegram-bot")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(520),alt:"https://github.com/python-telegram-bot/python-telegram-bot仓库介绍",title:"https://github.com/python-telegram-bot/python-telegram-bot仓库介绍"}}),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(521),alt:"https://github.com/python-telegram-bot/python-telegram-bot仓库介绍",title:"https://github.com/python-telegram-bot/python-telegram-bot仓库介绍"}}),t._v(" "),e("p",[t._v("Telegram官网机器人API（非常多！！）：")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(522),alt:"telegram Bot官网API截图",title:"telegram Bot官网API截图"}}),t._v(" "),e("p",[t._v("当然，这种麻烦的实现方式不在我们的考虑范围内，下面看另一个方法。")]),t._v(" "),e("h2",{attrs:{id:"四、iolinker-编排工具实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、iolinker-编排工具实现"}},[t._v("#")]),t._v(" 四、IOLinker 编排工具实现")]),t._v(" "),e("h3",{attrs:{id:"_1-下载iolinker并启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-下载iolinker并启动"}},[t._v("#")]),t._v(" (1) 下载iolinker并启动")]),t._v(" "),e("p",[t._v("参考官网文章："),e("a",{attrs:{href:"https://iolinker.com/zh/how-to-run-iolinker.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何运行Iolinker"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"_2-创建telegram凭据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建telegram凭据"}},[t._v("#")]),t._v(" (2) 创建Telegram凭据")]),t._v(" "),e("p",[t._v("这里相信大部分人应该都有，就不详细展开，主要是去官方的BotFather申请。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(523),alt:"如何通过BotFather申请Telegram机器人",title:"如何通过BotFather申请Telegram机器人"}}),t._v(" "),e("p",[t._v("创建完凭据后，进入IOLinker的凭据管理页面，录入前面创建的Telegram凭据：")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(524),alt:"在IOLinker创建Telegram凭据",title:"在IOLinker创建Telegram凭据"}}),t._v(" "),e("ul",[e("li",[e("p",[t._v("这里设置该凭据未默认凭据，这个我们跟机器人聊天时，系统会默认定位到是哪个Telegram凭据")])]),t._v(" "),e("li",[e("p",[t._v("启用内置预设命令，启用后，默认就可以使用"),e("code",[t._v("/start")]),t._v("、"),e("code",[t._v("/man")]),t._v("和"),e("code",[t._v("/list")]),t._v("三个自定义命令，没写一行代码就可以轻松实现指令功能。如果要修改描述，可以到创建凭据的页面进行修改。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(525),alt:"tg-bot-start-cmd",title:"telegram 机器人/start命令"}}),t._v(" "),e("p",[t._v("自定义命令列表：")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(526),alt:"builtin-cmd-list",title:"内置的自定义命令"}})])]),t._v(" "),e("h3",{attrs:{id:"_3-创建并配置telegram机器人触发器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建并配置telegram机器人触发器"}},[t._v("#")]),t._v(" (3) 创建并配置Telegram机器人触发器")]),t._v(" "),e("p",[t._v("点击【编辑】菜单栏下的【添加流程】按钮：")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(527),alt:"创建工作流按钮",title:"创建工作流按钮"}}),t._v(" "),e("p",[t._v("在左侧【触发器】分类下，选择【Telegram触发器】，双击并按照下图配置。")]),t._v(" "),e("ul",[e("li",[t._v("凭据：使用前面创建的Telegram凭据")]),t._v(" "),e("li",[t._v("消息类型：这里选择文本")]),t._v(" "),e("li",[t._v("授权成员：默认不填即支持响应所有人的输入")]),t._v(" "),e("li",[t._v("触发范围：选择命令输入触发。备注：默认是任意输入触发，即不管输入什么字符串都会响应")]),t._v(" "),e("li",[t._v("命令：这里我们使用每个机器人默认都带的/start命令")]),t._v(" "),e("li",[t._v("命令介绍：这里设置后可以在Bot的预设命令列表显示")]),t._v(" "),e("li",[t._v("命令行参数：参考文档："),e("a",{attrs:{href:"https://iolinker.com/zh/trigger_telegram.html#%E5%91%BD%E4%BB%A4%E5%92%8C%E5%8F%82%E6%95%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("命令行参数使用"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("调试数据：这里主要是模仿Telegram机器人触发器执行后的输出结果，可以在不实际运行机器人时模拟数据输出")])]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(528),alt:"设置Telegram Bot触发器配置页面",title:"设置Telegram Bot触发器配置页面"}}),t._v(" "),e("p",[t._v("到这里，如果我们直接保存，并启用，实际上是可以运行了，只不过这里只是捕获用户的输入没有给用户实际反馈，实际如下。")]),t._v(" "),e("p",[t._v("IOLinker工具会自动注册创建的Telgram Bot命令到预设命令列表。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(529),alt:"tg nmap cmd list",title:"tg nmap预设命令"}}),t._v(" "),e("p",[t._v("我们人输入"),e("code",[t._v("/nmap -h 1.1.1.1")]),t._v("命令并带参数触发工作流运行（不带参数也可以，会使用默认值）。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(530),alt:"tg nmap命令触发工作流",title:"tg nmap命令触发工作流"}}),t._v(" "),e("p",[t._v("在Telegram机器人输入"),e("code",[t._v("/nmap")]),t._v("指令后，我们可以在工作流列表中看到工作流响应执行的记录。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(531),alt:"telegram bot执行记录列表",title:"telegram bot执行记录列表"}}),t._v(" "),e("p",[t._v("点击执行记录，可以看到详细的响应数据。前面输入的参数会自动被解析提取出来：")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(532),alt:"telegram bot执行详情",title:"telegram bot执行详情"}}),t._v(" "),e("p",[t._v("至此，我们就实现了机器人指令的输入和响应了，后续就可以添加其他的流程逻辑，例如发消息或发送审批交互按钮等。")]),t._v(" "),e("h3",{attrs:{id:"_4-添加telegram-bot审批交互功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-添加telegram-bot审批交互功能"}},[t._v("#")]),t._v(" (4) 添加Telegram Bot审批交互功能")]),t._v(" "),e("p",[t._v("点击左侧的【逻辑组件】选择【审批】APP，拖入编辑器并双击配置。")]),t._v(" "),e("ul",[e("li",[t._v("审批渠道：默认可以在网页审批，这里我们勾选多Telegram")]),t._v(" "),e("li",[t._v("Telegram凭据：勾选前面创建的Telegram凭据")]),t._v(" "),e("li",[t._v("名称：消息名称")]),t._v(" "),e("li",[t._v("内容：审批的内容")]),t._v(" "),e("li",[t._v("成员：这里默认只能选择集（在设置栏目查看）。注意：这里需要再【设置】-》【账号】下设置自己Telegram的账号ID，关于查询自己Telegram ID，查看文档："),e("a",{attrs:{href:"https://iolinker.com/zh/send_telegram_message.html#chatid",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何查看Telegram ID"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("类型：或签，即只要有一个审批即可")]),t._v(" "),e("li",[t._v("超时：这里可以设置多少秒后超时，进入中间灰色远点连线指向的分支")]),t._v(" "),e("li",[t._v("Yes Label：设置审批通过的标签名称")]),t._v(" "),e("li",[t._v("No Label：设置审批驳回的标签名称")])]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(533),alt:"如何设置Telegram ID账号",title:"如何设置Telegram ID账号"}}),t._v(" "),e("p",[t._v("如下图，设置了审批APP后，可以设置同意（绿色圆点）和驳回（红色圆点）的后续响应分支，例如执行其他python代码之类的。也可以使用Telegram发送消息。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(534),alt:"设置Telegram审批的同意、驳回和超时分支",title:"设置Telegram审批的同意、驳回和超时分支"}}),t._v(" "),e("h3",{attrs:{id:"_5-保存并启用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-保存并启用"}},[t._v("#")]),t._v(" (5) 保存并启用")]),t._v(" "),e("p",[t._v("保存后，可以再【流程管理】下的【机器人列表】看到创建的机器人信息，也可以在【工作流列表】看到。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(535),alt:"telegram bot列表",title:"telegram bot列表"}}),t._v(" "),e("h3",{attrs:{id:"_6-测试机器人"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-测试机器人"}},[t._v("#")]),t._v(" (6) 测试机器人")]),t._v(" "),e("p",[t._v("打开创建的机器人，输入"),e("code",[t._v("/start")]),t._v("命令，我们会看到机器人给我们发送了审批的交互按钮。")]),t._v(" "),e("p",[t._v("点击【Yes】或【No】按钮，执行后续同意或驳回分支的流程。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(536),alt:"触发telegram bot /start命令响应",title:"触发telegram bot /start命令响应"}}),t._v(" "),e("p",[t._v("我们回到【执行记录】可以看到工作流的响应记录，这里可以看到工作流根据机器人的交互选择了对应的分支流程执行。")]),t._v(" "),e("p",[t._v("整个过程熟练的话，可以不到一分钟完成，相比过去写代码速度回高效很多！！")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:a(537),alt:"telegram bot执行详情",title:"telegram bot执行详情"}})])}),[],!1,null,null,null);e.default=s.exports}}]);